#Revised 3-Clause BSD License for Columbia University Kermit Software
#Copyright Â© 2020
#Trustees of Columbia University in the City of New York.
#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
#    Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#    Neither the name of Columbia University nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. 
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---
# tasks file for app-jupyterhub
# Based off https://jupyterhub.readthedocs.io/en/stable/installation-guide-hard.html 
- name: Resolve platform specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - '{{ ansible_distribution }}_{{ ansible_distribution_major_version }}.yml'
        - default.yml
      skip: true
      paths:
        - '{{ role_path }}/vars'

# Used by pip module
- name: Install Python3 for use with pip module
  package:
    name: "{{ item }}"
    state: present
  loop: "{{ jupyterhub_python_pkgs }}"
  when: jupyterhub_python_pkgs is defined

- name: Create a JupyterHub service user.
  user:
    name: "{{ jupyterhub_service_user }}"
    home: /opt/jupyterhub
    shell: /sbin/nologin
  when: jupyterhub_service_user != "root"

- name: Ensure that JupyterHub group exists
  group:
    name: "{{ jupyterhub_group }}"
    state: present
  when: jupyterhub_service_user != "root"

- name: Ensure that the service user is a member of the JupyterHub group
  user:
    name: "{{ jupyterhub_service_user }}"
    groups: "{{ jupyterhub_group }}"
    append: yes
  when: jupyterhub_service_user != "root"

- name: Allow the Jupyterhub service user to run batch submit/cancel/queue status as anyone
  copy: 
    content: |
      {{ jupyterhub_service_user }} ALL=(%{{ jupyterhub_group }}) NOPASSWD:SETENV:{{ jupyterhub_batchspawner_commands }}
    dest: /etc/sudoers.d/jupyterhub-batchspawner
    validate: 'visudo -cf %s'
    mode: 0440 when: '"batchspawner" in jupyterhub_spawners and jupyterhub_service_user != "root"'

- name: Allow the Jupyterhub service user to run as anyone
  copy: 
    content: |
      {{ jupyterhub_service_user }} ALL=(%{{ jupyterhub_group }}) NOPASSWD:{{ jupyterhub_venv_path }}/bin/sudospawner
    dest: /etc/sudoers.d/jupyterhub-sudospawner
    validate: 'visudo -cf %s'
    mode: 0440
  when: '"sudospawner" in jupyterhub_spawners and jupyterhub_service_user != "root"'

- name: Ensure that the JupyterHub venv is owned by the service user and accessible to all
  file:
    path: "{{ jupyterhub_venv_path }}"
    owner: "{{ jupyterhub_service_user }}"
    group: "{{ jupyterhub_service_user }}"
    mode: '0775'
    state: directory

# PyYAML is used for the config file, which is re-encoded
# as YAML in this role and then imported into a Python script.
- name: Install Jupyter PyPI packages into a virtualenv
  pip:
    name: "{{ item }}"
    state: present
    virtualenv: "{{ jupyterhub_venv_path }}"
    virtualenv_python: python3
    virtualenv_command: virtualenv-3
  loop:
    - pyyaml
    - wheel
    - jupyterhub
# Version 2 necessary for the Jupyter SLURM module
    - jupyterlab==1.2.8
    - ipywidgets
  become_user: "{{ jupyterhub_service_user }}"

# Used by npm module
- name: Install nodejs repo
  package:
    name: "{{ jupyterhub_npm_prereq_repo }}"
    state: present
  when: jupyterhub_npm_prereq_repo is defined

- name: Install npm
  package:
    name: "{{ item }}"
    state: present
  loop: "{{ jupyterhub_npm_prereq_pkgs }}"
  when: jupyterhub_npm_prereq_pkgs is defined

- name: Install "configurable-http-proxy" node.js package globally.
  npm:
    name: configurable-http-proxy
    global: yes

- name: Install custom spawners
  pip:
    name: "{{ item }}"
    state: present
    virtualenv: "{{ jupyterhub_venv_path }}"
    virtualenv_python: python3
    virtualenv_command: virtualenv-3
  loop: "{{ jupyterhub_spawners }}"
  when: jupyterhub_spawners is defined
  become_user: "{{ jupyterhub_service_user }}"

- name: Install custom authenticators
  pip:
    name: "{{ item }}"
    state: present
    virtualenv: "{{ jupyterhub_venv_path }}"
    virtualenv_python: python3
    virtualenv_command: virtualenv-3
  loop: "{{ jupyterhub_authenticators }}"
  when: jupyterhub_authenticators is defined
  become_user: "{{ jupyterhub_service_user }}"

- name: Install custom JupyterLab extensions with pip
  pip:
    name: "{{ item }}"
    state: present
    virtualenv: "{{ jupyterhub_venv_path }}"
    virtualenv_python: python3
    virtualenv_command: virtualenv-3
  loop: "{{ jupyterhub_pip_extensions }}"
  when: jupyterhub_pip_extensions is defined
  become_user: "{{ jupyterhub_service_user }}"

- name: Install custom Jupyterlab extensions with jupyter labextension
  command: "{{ jupyterhub_venv_path }}/bin/jupyter labextension install {{ item }}"
  loop: "{{ jupyterhub_labextension_extensions }}"
  when: jupyterhub_labextension_extensions is defined
  become_user: "{{ jupyterhub_service_user }}"

- name: Create the folder for the JupyterHub configuration
  file:
    path: "{{ jupyterhub_config_path }}"
    state: directory
  become_user: "{{ jupyterhub_service_user }}"

- name: Install dependencies for custom code in the Jupyter config
  pip:
    name: "{{ item }}"
    state: present
    virtualenv: "{{ jupyterhub_venv_path }}"
    virtualenv_python: python3
    virtualenv_command: virtualenv-3
  loop: "{{ jupyterhub_custom_code_deps }}"
  when: jupyterhub_custom_code is defined and jupyterhub_custom_code_deps is defined
  become_user: "{{ jupyterhub_service_user }}"

- name: Create the config YAML file
  copy:
    content: "{{ jupyterhub_config | to_nice_yaml }}"
    dest: "{{ jupyterhub_config_yaml }}"
  become_user: "{{ jupyterhub_service_user }}"

- name: Create the config Python file
  template:
    src: jupyterhub_config.py.j2
    dest: "{{ jupyterhub_config_py }}"
  become_user: "{{ jupyterhub_service_user }}"

# I don't understand the advantage behind having this within the venv
# directory and then symlinked in, so I'm just putting it directly amongst
# the other unit files.
- name: Create the systemd service
  template:
    src: jupyterhub.service.j2
    dest: /etc/systemd/system/jupyterhub.service
  notify:
    - start and enable jupyterhub

